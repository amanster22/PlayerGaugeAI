import { useState, useEffect } from 'react';
import logo from './logo.svg';


const getSalaryChangeTailwind = (change) => {
  if (change == null) return { colorClass: "text-gray-400", arrow: "‚ûñ" };

  if (change > 5) return { colorClass: "text-green-500", arrow: "‚¨ÜÔ∏è" };
  if (change < -5) return { colorClass: "text-red-500", arrow: "‚¨áÔ∏è" };
  return { colorClass: "text-yellow-400", arrow: "‚û°Ô∏è" };
};
function App() {
  const [featuredPlayer, setFeaturedPlayer] = useState(null);
  const [question, setQuestion] = useState("");
  const [response, setResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const [askedQuestion, setAskedQuestion] = useState("");
  const [lookupName, setLookupName] = useState("");
  const [lookupResult, setLookupResult] = useState(null);
  const [lookupError, setLookupError] = useState("");

  const [teams] = useState([
    'ATL', 'BOS', 'BKN', 'CHA', 'CHI', 'CLE', 'DAL', 'DEN', 'DET', 'GSW',
    'HOU', 'IND', 'LAC', 'LAL', 'MEM', 'MIA', 'MIL', 'MIN', 'NOP', 'NYK',
    'OKC', 'ORL', 'PHI', 'PHX', 'POR', 'SAC', 'SAS', 'TOR', 'UTA', 'WAS'
  ]);

  const [expandedTeam, setExpandedTeam] = useState(null);
  const [teamPlayers, setTeamPlayers] = useState([]);
  const [loadingTeam, setLoadingTeam] = useState(false);
  const [teamSalary, setTeamSalary] = useState(null);
  const [showFeaturedStats, setShowFeaturedStats] = useState(false);
  const [showLookupStats, setShowLookupStats] = useState(false);






  useEffect(() => {
    fetch('http://localhost:5001/api/featured-player')
      .then((res) => res.json())
      .then((data) => setFeaturedPlayer(data))
      .catch((err) => console.error("Error fetching player data:", err));
  }, []);

  const handleAskAI = async () => {
    if (!question.trim()) return;

    setAskedQuestion(question);      // Save question for display
    setQuestion("");                 // Immediately clear input
    setLoading(true);
    setResponse("");

    try {
      // Step 1: Get SQL query from Mistral
      const aiRes = await fetch("https://api.mistral.ai/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer Lreh85pOjfLtK0MtVxOj7RBsUKqoTadO`
        },
        body: JSON.stringify({
          model: "mistral-small",
          messages: [
            {
              role: "system",
              content: "Your job is to review the provided schema for the table named 'player_data' and return the correct SQL query depending on the question. The schema includes the following features: PLAYER_ID, PLAYER_NAME, NICKNAME, TEAM_ID, TEAM_ABBREVIATION, AGE, GP, W, L, W_PCT, MIN, FGM, FGA, FG_PCT, FG3M, FG3A, FG3_PCT, FTM, FTA, FT_PCT, OREB, DREB, REB, AST, TOV, STL, BLK, BLKA, PF, PFD, PTS, PLUS_MINUS, NBA_FANTASY_PTS, DD2, TD3, WNBA_FANTASY_PTS, GP_RANK, W_RANK, L_RANK, W_PCT_RANK, MIN_RANK, FGM_RANK, FGA_RANK, FG_PCT_RANK, FG3M_RANK, FG3A_RANK, FG3_PCT_RANK, FTM_RANK, FTA_RANK, FT_PCT_RANK, OREB_RANK, DREB_RANK, REB_RANK, AST_RANK, TOV_RANK, STL_RANK, BLK_RANK, BLKA_RANK, PF_RANK, PFD_RANK, PTS_RANK, PLUS_MINUS_RANK, NBA_FANTASY_PTS_RANK, DD2_RANK, TD3_RANK, WNBA_FANTASY_PTS_RANK, SALARY, PPG, RPG, APG, PREDICTED_SALARY, SALARY_DIFF, and SALARY_PCT_CHANGE. If a question cannot be answered using only these features from the schema, you must admit that you do not know. Just return the SQL query string, nothing else no need to explain what the query brings, just start with 'SELECT', 'FROM' will always be 'player_data'  and end with ';', Also proofread the name, remember these are nba players so ensure the name is correct. Dont add any comments, only the query, no need to say ai generated, just return the sql query."
            },
            { role: "user", content: question }
          ]
        })
      });

      const aiData = await aiRes.json();
      const sqlQuery = aiData.choices[0]?.message?.content.trim();


      console.log("AI-generated SQL:", sqlQuery);

      if (!sqlQuery.toLowerCase().startsWith("select")) {
        setResponse("Invalid query generated by AI.");
        return;
      }

      // Step 2: Send SQL query to your backend to get results
      const dbRes = await fetch("http://localhost:5001/api/query", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ query: sqlQuery })
      });



      const dbData = await dbRes.json();

      if (dbData.error) {
        setResponse(`SQL Error: ${dbData.error}`);
        return;
      }

      // Step 3: Now send results back to Mistral for natural language summary
      const summaryRes = await fetch("https://api.mistral.ai/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer Lreh85pOjfLtK0MtVxOj7RBsUKqoTadO`
        },
        body: JSON.stringify({
          model: "mistral-small",
          messages: [
            { role: "system", content: "You are a helpful assistant that turns database query results into natural language answers." },
            { role: "user", content: `User asked: "${question}"` },
            { role: "assistant", content: `Here is the data returned from the database: ${JSON.stringify(dbData.results)}` },
            { role: "user", content: "Please summarize this data as a concise, natural language answer." }
          ]
        })
      });

      const summaryData = await summaryRes.json();
      const naturalLanguageAnswer = summaryData.choices[0]?.message?.content || "No summary response from AI.";


      setResponse(naturalLanguageAnswer);

    } catch (error) {
      console.error("Error:", error);
      setResponse("There was an error processing your request.");
    }
    finally {
      setLoading(false)
    }
  };

  const handleTeamClick = async (team) => {
    setExpandedTeam(team);
    setLoadingTeam(true);
    try {
      const res = await fetch(`http://localhost:5001/api/team-players?team=${team}`);
      const data = await res.json();
      setTeamPlayers(data.players);
      setTeamSalary(data.teamSalary); // üëà grab the salary
    } catch (err) {
      console.error("Error fetching team players:", err);
    } finally {
      setLoadingTeam(false);
    }
  };




  const handleLookup = async () => {
    if (!lookupName.trim()) return;

    try {
      const res = await fetch(`http://localhost:5001/api/player-lookup?name=${encodeURIComponent(lookupName.trim())}`);
      const data = await res.json();

      if (data.error || !data.player) {
        setLookupResult(null);
        setLookupError("Player not found.");
      } else {
        setLookupResult(data.player);
        setLookupError("");
      }
      console.log("Lookup result:", data);
    } catch (error) {
      console.error("Error looking up player:", error);
      setLookupError("Failed to fetch player data.");
      setLookupResult(null);
    }


  };



  return (
    <div className="font-titillium bg-blue-900 text-white pt-20">
      {/* Navbar */}
      <nav className="bg-blue-800 shadow-md fixed top-0 w-full z-50">
        <div className="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
          <a href="#home" className="flex items-center">
            <img
              src={logo}
              alt="Logo"
              className="w-40 md:w-56 transition duration-300 hover:brightness-0 hover:invert hover:sepia hover:hue-rotate-[330deg] hover:saturate-[5] hover:contrast-[1.2]"
            />
          </a>
          <ul className="flex gap-6 text-white font-semibold">
            <li><a href="#home" className="hover:text-orange-400">Home</a></li>
            <li><a href="#players" className="hover:text-orange-400">Players</a></li>
            <li><a href="#teams" className="hover:text-orange-400">Teams</a></li>
            <li><a href="#analytics" className="hover:text-orange-400">Analytics</a></li>
            <li><a href="#about" className="hover:text-orange-400">About</a></li>
          </ul>
        </div>
      </nav>

      <section id="home" className="min-h-screen flex flex-col items-center justify-center text-center px-6 bg-gradient-to-br from-blue-900 to-blue-700">
        <h1 className="text-5xl font-bold mb-4">AI-Powered NBA Player Evaluator</h1>
        <p className="text-lg text-blue-200 mb-6">
          Ask our chatbot to evaluate performance, salary fit, and player trends.
        </p>
        <div className="w-full max-w-xl bg-white text-black rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-semibold mb-4">Ask the AI</h2>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              handleAskAI();
              setQuestion("");
            }}
            className="flex flex-col sm:flex-row-reverse gap-3 items-stretch"

          >
            <button
              type="submit"
              className="bg-orange-500 hover:bg-orange-600 text-white font-bold p-3 rounded self-start flex items-center justify-center w-12 h-12"
              disabled={loading}
            >
              {loading ? (
                <svg
                  className="animate-spin h-5 w-5 text-white"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none" viewBox="0 0 24 24"
                >
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z" />
                </svg>
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  fill="none" viewBox="0 0 24 24"
                  stroke="currentColor" strokeWidth="2"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
                </svg>
              )}
            </button>

            <textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="What would be the fair salary for Tyrese Maxey's current performance?"
              className="flex-1 p-3 border border-gray-300 rounded-md resize-none"
              rows={3}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  handleAskAI();
                  setQuestion("");
                }
              }}
            />
          </form>

          {askedQuestion && response && (
            <div className="mt-4 text-left">
              <h3 className="text-lg font-semibold mb-1">You asked:</h3>
              <p className="text-sm text-gray-900 italic mb-2 whitespace-pre-wrap">"{askedQuestion}"</p>
              <h3 className="text-lg font-semibold">AI Response:</h3>
              <p className="text-sm text-gray-800 mt-1 whitespace-pre-wrap">{response}</p>
            </div>
          )}

        </div>
      </section>


      
      {/* Players Section */}
<section id="players" className="py-20 bg-blue-800 px-6">
  <div className="max-w-6xl mx-auto">
    <h2 className="text-4xl font-bold text-center mb-10">Player Evaluations</h2>
    <div className="max-w-3xl mx-auto text-center mb-16">
      <h3 className="text-3xl font-semibold text-orange-400 mb-6">Today's Featured Player</h3>
      {featuredPlayer && (() => {
        const change = featuredPlayer.SALARY_PCT_CHANGE;
        let salaryDiffColor = "text-yellow-500"; // default color

        if (change > 5) salaryDiffColor = "text-green-600";
        else if (change < -5) salaryDiffColor = "text-red-600";

        const roundedSalaryChange = (
          ((featuredPlayer.FORMATTED_PREDICTED_SALARY - featuredPlayer.FORMATTED_SALARY) * 100) /
          featuredPlayer.FORMATTED_SALARY
        ).toFixed(2);

        return (
          <div className="bg-white text-black rounded-xl shadow-md p-6 text-left">
            <h4 className="text-2xl font-bold mb-4">{featuredPlayer.PLAYER_NAME}</h4>

            {/* Dropdown Toggle */}
            <div className="mt-4">
              <button
                onClick={() => setShowFeaturedStats(!showFeaturedStats)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
              >
                {showFeaturedStats ? "Hide Stats" : "Show Featured Player Stats"}
              </button>

              {showFeaturedStats && (
                <div className="mt-4 bg-gray-100 rounded-lg p-4 space-y-2">
                  <p>Team: {featuredPlayer.TEAM_ABBREVIATION}</p>
                  <p>Position: {featuredPlayer.POSITION}</p>
                  <p>Jersey Number: {featuredPlayer.JERSEY_NUMBER}</p>
                  <p>Height: {featuredPlayer.HEIGHT}</p>
                  <p>Weight: {featuredPlayer.WEIGHT}</p>
                  <p>Age: {featuredPlayer.AGE}</p>
                  <p>Country: {featuredPlayer.COUNTRY}</p>
                  <p>College: {featuredPlayer.COLLEGE}</p>
                  <p>Draft Year: {featuredPlayer.DRAFT_YEAR}</p>
                  <p>Draft Round: {featuredPlayer.DRAFT_ROUND}</p>
                  <p>Draft Number: {featuredPlayer.DRAFT_NUMBER}</p>
                  <p>PPG: {featuredPlayer.PPG}</p>
                  <p>APG: {featuredPlayer.APG}</p>
                  <p>RPG: {featuredPlayer.RPG}</p>
                  <p className="text-orange-500 font-semibold">
                    Official Salary: ${featuredPlayer.FORMATTED_SALARY}M
                  </p>
                  <p className="text-green-600 font-semibold">
                    Estimated Salary: ${featuredPlayer.FORMATTED_PREDICTED_SALARY}M
                  </p>
                  <p className={`${salaryDiffColor} font-bold`}>
                    Salary Change: {roundedSalaryChange}%
                  </p>
                  <p className="text-sm text-gray-700 mt-4">Based on recent performance and league trends.</p>
                </div>
              )}
            </div>

            
          </div>
        );
      })()}
    </div>
  </div>

  {/* Lookup Player Section */}
  <div className="max-w-3xl mx-auto text-center mt-12">
    <h3 className="text-2xl font-semibold text-orange-300 mb-4">Look Up a Player</h3>
    <div className="flex flex-col sm:flex-row items-center justify-center gap-3 mb-6">
      <input
        type="text"
        value={lookupName}
        onChange={(e) => setLookupName(e.target.value)}
        placeholder="Enter player name"
        className="p-3 border border-gray-300 rounded-md w-full sm:w-80 text-black"
      />
      <button
        onClick={handleLookup}
        className="bg-orange-500 hover:bg-orange-600 text-white font-bold px-5 py-3 rounded"
      >
        Search
      </button>
    </div>

    {lookupError && <p className="text-red-400">{lookupError}</p>}

    {lookupResult && (() => {
      const change = lookupResult.SALARY_PCT_CHANGE;
      let salaryDiffColor = "text-yellow-500";
      if (change > 5) salaryDiffColor = "text-green-600";
      else if (change < -5) salaryDiffColor = "text-red-600";

      const roundedSalaryChange = (
        ((lookupResult.FORMATTED_PREDICTED_SALARY - lookupResult.FORMATTED_SALARY) * 100) /
        lookupResult.FORMATTED_SALARY
      ).toFixed(2);

      return (
        <div className="mt-6 bg-white text-black rounded-xl shadow-md p-6 text-left">
          <h4 className="text-xl font-bold mb-4">{lookupResult.PLAYER_NAME}</h4>

          {/* Dropdown Toggle */}
          <div className="mt-4">
            <button
              onClick={() => setShowLookupStats(!showLookupStats)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
            >
              {showLookupStats ? "Hide Stats" : "Show Stats"}
            </button>

            {showLookupStats && (
              <div className="mt-4 bg-gray-100 rounded-lg p-4 space-y-2">
                <p>Team: {lookupResult.TEAM_ABBREVIATION}</p>
                <p>Position: {lookupResult.POSITION}</p>
                <p>Jersey Number: {lookupResult.JERSEY_NUMBER}</p>
                <p>Height: {lookupResult.HEIGHT}</p>
                <p>Weight: {lookupResult.WEIGHT}</p>
                <p>Age: {lookupResult.AGE}</p>
                <p>Country: {lookupResult.COUNTRY}</p>
                <p>College: {lookupResult.COLLEGE}</p>
                <p>Draft Year: {lookupResult.DRAFT_YEAR}</p>
                <p>Draft Round: {lookupResult.DRAFT_ROUND}</p>
                <p>Draft Number: {lookupResult.DRAFT_NUMBER}</p>
                <p>PPG: {lookupResult.PPG}</p>
                <p>APG: {lookupResult.APG}</p>
                <p>RPG: {lookupResult.RPG}</p>
                <p className="text-orange-500 font-semibold">
                  Official Salary: ${lookupResult.FORMATTED_SALARY}M
                </p>
                <p className="text-green-600 font-semibold">
                  Estimated Salary: ${lookupResult.FORMATTED_PREDICTED_SALARY}M
                </p>
                <p className={`${salaryDiffColor} font-bold`}>
                  Salary Change: {roundedSalaryChange}%
                </p>
              </div>
            )}
          </div>
        </div>
      );
    })()}
  </div>
</section>


      {/* Teams Section */}
      <section id="teams" className="py-20 bg-blue-900 px-6">
        <div className="max-w-6xl mx-auto">
          <h2 className="text-4xl font-bold text-center mb-10">Team Insights</h2>

          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-4 justify-items-center">
            {teams.map((team) => (
              <button
                key={team}
                onClick={() => handleTeamClick(team)}
                className={`bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-4 rounded transition duration-200 ${expandedTeam === team ? 'ring-4 ring-yellow-400' : ''}`}
              >
                {team}
              </button>
            ))}
          </div>

          {expandedTeam && (
            <div className="mt-10">
              <h3 className="text-2xl font-semibold text-orange-300 mb-4 text-center">
                Players on {expandedTeam}
              </h3>

              {loadingTeam ? (
                <p className="text-center text-blue-200">Loading players...</p>
              ) : teamPlayers.length === 0 ? (
                <p className="text-center text-red-300">No players found.</p>
              ) : (
                <>
                  {teamSalary !== null && (
                    <p className="text-center text-green-300 font-semibold text-lg mb-4">
                      Estimated Team Salary (Top 13): ${teamSalary.toLocaleString()}M
                    </p>
                  )}

                  <div className="overflow-x-auto whitespace-nowrap px-2 py-4">
                    <div className="flex gap-4">
                      {teamPlayers.map((player) => {
                        let salaryChangeColor = "text-yellow-500";
                        if (player.SALARY_PCT_CHANGE > 5) salaryChangeColor = "text-green-600";
                        else if (player.SALARY_PCT_CHANGE < -5) salaryChangeColor = "text-red-600";

                        return (
                          <div
                            key={player.PLAYER_NAME}
                            className="min-w-[200px] bg-white text-black p-4 rounded-lg shadow-md"
                          >
                            <h4 className="font-bold text-lg mb-2">{player.PLAYER_NAME}</h4>
                            <p className="text-sm">PPG: {player.PPG}</p>
                            <p className="text-sm">APG: {player.APG}</p>
                            <p className="text-sm">RPG: {player.RPG}</p>
                            <p className="mt-2 font-semibold text-orange-600">
                              Est. Salary: ${player.FORMATTED_SALARY}M
                            </p>
                            <p className="mt-2 font-semibold">
                              Salary Change: <span className={salaryChangeColor}>{player.SALARY_PCT_CHANGE}%</span>
                            </p>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </>
              )}
            </div>
          )}
        </div>
      </section>




{/* Analytics Section */}
<section
  id="analytics"
  className="py-20 bg-gradient-to-br from-blue-800 to-blue-600 px-6"
>
  <div className="max-w-6xl mx-auto text-center">
    <h2 className="text-4xl font-bold mb-6">Analytics Dashboard</h2>

    <div className="flex flex-wrap justify-center gap-12 mt-10">

      {/* Wealthiest Teams */}
      <div className="bg-white text-black rounded-2xl shadow-lg p-6 flex-1 min-w-[600px] max-w-[800px]">
        <h3 className="text-xl font-bold mb-4">Wealthiest Teams</h3>
        <iframe
          src="/wealthiestTeams2.html"
          title="Wealthiest Teams"
          className="w-full h-[600px] rounded-lg border border-gray-300"
        />
      </div>

      {/* Poorest Teams */}
      <div className="bg-white text-black rounded-2xl shadow-lg p-6 flex-1 min-w-[600px] max-w-[800px]">
        <h3 className="text-xl font-bold mb-4">Poorest Teams</h3>
        <iframe
          src="/poorestTeams2.html"
          title="Poorest Teams"
          className="w-full h-[600px] rounded-lg border border-gray-300"
        />
      </div>

    </div>
  </div>
</section>




      {/* About Section */}
      <section id="about" className="py-20 bg-blue-950 px-6">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-4xl font-bold text-orange-400 mb-4">About PlayerGaugeAI</h2>
          <p className="text-blue-200 text-lg mb-6">PlayerGaugeAI is an intelligent NBA analytics platform built to bridge the gap between machine learning and everyday fans...</p>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-blue-800 text-center py-6">
        <p className="text-blue-300">&copy; 2025 PlayerGaugeAI. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
